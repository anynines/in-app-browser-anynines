var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { IonicNativePlugin, instanceAvailability, cordovaInstance } from '@ionic-native/core';
import { Observable } from 'rxjs';
var InAppBrowserObject = /** @class */ (function () {
    /**
     * Opens a URL in a new InAppBrowserOriginal instance, the current browser instance, or the system browser.
     * @param {string} url     The URL to load.
     * @param {string} [target="self"]  The target in which to load the URL, an optional parameter that defaults to _self.
     *                 _self: Opens in the WebView if the URL is in the white list, otherwise it opens in the InAppBrowserOriginal.
     *                 _blank: Opens in the InAppBrowserOriginal.
     *                 _system: Opens in the system's web browser.
     * @param {string | InAppBrowserOptions} [options] Options for the InAppBrowserOriginal. Optional, defaulting to: location=yes.
     *                 The options string must not contain any blank space, and each feature's
     *                 name/value pairs must be separated by a comma. Feature names are case insensitive.
     * @param {Record<string, string>} [headers]
     */
    function InAppBrowserObject(url, target, options, headers) {
        try {
            if (options && typeof options !== 'string') {
                options = Object.keys(options)
                    .map(function (key) { return key + "=" + options[key]; })
                    .join(',');
            }
            this._objectInstance = cordova.InAppBrowser.open(url, target, options, headers);
        }
        catch (e) {
            if (typeof window !== 'undefined') {
                window.open(url, target);
            }
            console.warn('Native: InAppBrowserOriginal is not installed or you are running on a browser. Falling back to window.open.');
        }
    }
    InAppBrowserObject.prototype.loadAfterBeforeload = function (strUrl, headers) { return cordovaInstance(this, "loadAfterBeforeload", { "sync": true }, arguments); };
    InAppBrowserObject.prototype.injectRequest = function (jsonRequestData, headers) { return cordovaInstance(this, "injectRequest", { "sync": true }, arguments); };
    InAppBrowserObject.prototype.finishNavigation = function () { return cordovaInstance(this, "finishNavigation", { "sync": true }, arguments); };
    InAppBrowserObject.prototype.show = function () { return cordovaInstance(this, "show", { "sync": true }, arguments); };
    InAppBrowserObject.prototype.close = function () { return cordovaInstance(this, "close", { "sync": true }, arguments); };
    InAppBrowserObject.prototype.hide = function () { return cordovaInstance(this, "hide", { "sync": true }, arguments); };
    InAppBrowserObject.prototype.canGoBack = function (successCallback, errorCallback) { return cordovaInstance(this, "canGoBack", { "sync": true }, arguments); };
    InAppBrowserObject.prototype.goBack = function () { return cordovaInstance(this, "goBack", { "sync": true }, arguments); };
    InAppBrowserObject.prototype.executeScript = function (script) { return cordovaInstance(this, "executeScript", {}, arguments); };
    InAppBrowserObject.prototype.insertCSS = function (css) { return cordovaInstance(this, "insertCSS", {}, arguments); };
    InAppBrowserObject.prototype.on = function (event) {
        var _this = this;
        return (function () {
            if (instanceAvailability(_this) === true) {
                return new Observable(function (observer) {
                    _this._objectInstance.addEventListener(event, observer.next.bind(observer));
                    return function () { return _this._objectInstance.removeEventListener(event, observer.next.bind(observer)); };
                });
            }
        })();
    };
    return InAppBrowserObject;
}());
export { InAppBrowserObject };
var InAppBrowserOriginal = /** @class */ (function (_super) {
    __extends(InAppBrowserOriginal, _super);
    function InAppBrowserOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Opens a URL in a new InAppBrowserOriginal instance, the current browser instance, or the system browser.
     * @param  url {string}     The URL to load.
     * @param  target {string}  The target in which to load the URL, an optional parameter that defaults to _self.
     * @param  options {string} Options for the InAppBrowserOriginal. Optional, defaulting to: location=yes.
     *                 The options string must not contain any blank space, and each feature's
     *                 name/value pairs must be separated by a comma. Feature names are case insensitive.
     * @param {Record<string, string>} [headers]
     * @returns {InAppBrowserObject}
     */
    InAppBrowserOriginal.prototype.create = function (url, target, options, headers) {
        return new InAppBrowserObject(url, target, options, headers);
    };
    InAppBrowserOriginal.pluginName = "InAppBrowser";
    InAppBrowserOriginal.plugin = "cordova-plugin-inappbrowser-anynines";
    InAppBrowserOriginal.pluginRef = "cordova.InAppBrowser";
    InAppBrowserOriginal.repo = "https://github.com/apache/cordova-plugin-inappbrowser";
    InAppBrowserOriginal.platforms = ["AmazonFire OS", "Android", "Browser", "iOS", "macOS", "Windows"];
    return InAppBrowserOriginal;
}(IonicNativePlugin));
var InAppBrowser = new InAppBrowserOriginal();
export { InAppBrowser };
//# sourceMappingURL=data:application/json;base64,